import 'dart:convert';

import 'custom_stack_trace.dart';
import 'package:logger/logger.dart';

class AppLogPrinter extends LogPrinter {
  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex =
      RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex =
      RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex =
      RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

  final bool time;
  final bool colors;
  final bool emojis;
  final bool levels;

  AppLogPrinter({
    this.time = false,
    this.colors = false,
    this.emojis = false,
    this.levels = true,
  });

  static final levelPrefixes = {
    Level.trace: '[T]',
    Level.debug: '[D]',
    Level.info: '[I]',
    Level.warning: '[W]',
    Level.error: '[E]',
    Level.fatal: '[F]',
  };

  static final levelColors = {
    Level.trace: AnsiColor.fg(AnsiColor.grey(0.5)),
    Level.debug: AnsiColor.fg(AnsiColor.grey(0)),
    Level.info: AnsiColor.fg(12),
    Level.warning: AnsiColor.fg(208),
    Level.error: AnsiColor.fg(196),
    Level.fatal: AnsiColor.fg(199),
  };

  static final levelEmojis = {
    Level.trace: 'üó£',
    Level.debug: 'üêû ',
    Level.info: '‚ÑπÔ∏è ',
    Level.warning: '‚ö†Ô∏è ',
    Level.error: 'üî• ',
    Level.fatal: 'üëæ ',
  };

  @override
  List<String> log(LogEvent event) {
    var trace = CustomTrace(StackTrace.current);
    var messageStr = _stringifyMessage(event.message);
    var errorStr = event.error != null ? '  ERROR: ${event.error}' : '';
    var timeStr = time ? DateTime.now().toIso8601String() : '';
    var label = _labelFor(event.level);

    // var stack = " ${trace.method}";

    return [
      '$label $timeStr ${trace.method}: $messageStr $errorStr ${trace.package}'
    ];
  }

  String _labelFor(Level level) {
    String s = '';
    if (levels) {
      s = levelPrefixes[level].toString();
    }
    if (emojis) {
      s = levelEmojis[level].toString() + s;
    }
    return s;
  }

  String _stringifyMessage(dynamic message) {
    final finalMessage = message is Function ? message() : message;
    if (finalMessage is Map || finalMessage is Iterable) {
      var encoder = const JsonEncoder.withIndent(null);
      return encoder.convert(finalMessage);
    } else {
      return finalMessage.toString();
    }
  }

  String formatStackTrace(StackTrace stackTrace, int methodCount) {
    var lines = stackTrace.toString().split('\n');
    lines = lines.sublist(0, 0);
    var formatted = <String>[];
    var count = 0;
    for (var line in lines) {
      if (_discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line) ||
          line.isEmpty) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
      if (++count == methodCount) {
        break;
      }
    }

    if (formatted.isEmpty) {
      return '';
    } else {
      return formatted.join('\n');
    }
  }

  bool _discardDeviceStacktraceLine(String line) {
    var match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(2)?.startsWith('package:logger') ?? false;
  }

  bool _discardWebStacktraceLine(String line) {
    var match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return (match.group(1)?.startsWith('packages/logger') ?? false) ||
        (match.group(1)?.startsWith('dart-sdk/lib') ?? false);
  }

  bool _discardBrowserStacktraceLine(String line) {
    var match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return (match.group(1)?.startsWith('package:logger') ?? false) ||
        (match.group(1)?.startsWith('dart:') ?? false);
  }
}
